/*
 * This Spock specification was generated by the Gradle 'init' task.
 */
package de.andycandy.flow

import static de.andycandy.flow.TestUtil.*

import org.junit.Test

import de.andycandy.flow.App
import groovyjarjarpicocli.CommandLine.PicocliException
import spock.lang.Specification

class AppTest extends Specification {
    
	@Test
	def "test app evaluate"() {
		setup:
		def tempDir = createTemp('de/andycandy/flow/flow.dsl')
		
		App app = new App()
		File file = new File(tempDir.toFile(), 'flow.dsl')
		app.scriptFile = file
		
		when:
		def result = app.execute()
		
		then:
		result == [0, 1, 4, 9]
		
		cleanup:
		deleteTempDir(tempDir)
	}
	
	@Test
	def "test app evaluate no output"() {
		setup:
		def tempDir = createTemp('de/andycandy/flow/flow_no_output.dsl')
		
		App app = new App()
		File file = new File(tempDir.toFile(), 'flow_no_output.dsl')
		app.scriptFile = file
		
		when:
		def result = app.execute()
		
		then:
		result == null
		
		cleanup:
		deleteTempDir(tempDir)
	}
	
	@Test
	def "test app exit on usage"() {
		setup:
		def printUsage = false

		App app = new App() {
			
			@Override
			public void printUsage() {
				printUsage = true
			}
		}
		
		when:
		app.call()
		
		then:
		printUsage
	}
	
	@Test
	def "test app exit on no file"() {
		setup:
		def tempDir = createTemp()
		def error = ''
		App app = new App() {
			
			@Override
			public void printErr(String text) {
				error = text
			}
		}
		File file = new File(tempDir.toFile(), 'dafuq')
		app.scriptFile = file
		
		when:
		app.call()
		
		then:
		error == "File '${file.absolutePath}' not exists!"
		
		cleanup:
		deleteTempDir(tempDir)
	}
	
	@Test
	def "test app start"() {
		setup:
		setup:
		def tempDir = createTemp('de/andycandy/flow/flow_no_output.dsl')
		def executed = false
		
		App app = new App() {
			
			@Override
			public Object execute() {
				executed = true
			}
		}
		
		File file = new File(tempDir.toFile(), 'flow_no_output.dsl')
		
		
		when:
		(new picocli.CommandLine(app)).parseArgs(file.absolutePath)
		app.call()
		
		then:
		app.scriptFile == file
		executed
		
		cleanup:
		deleteTempDir(tempDir)
	}
	
	
	@Test
	def "test app start plugin"() {
		setup:
		def tmpPath = createTemp('de/andycandy/flow/plugin/dir/FlowDSLPluginTest.jar')
		App app = new App()
		
		File pluginJar = new File(tmpPath.toFile(), 'FlowDSLPluginTest.jar')
		
		File file = new File(Thread.currentThread().getContextClassLoader().getResource('de/andycandy/flow/flow_with_plugin.dsl').path)
		
		
		when:
		(new picocli.CommandLine(app)).parseArgs("-p", pluginJar.absolutePath, file.absolutePath)
		def result = app.execute()
		
		then:
		app.scriptFile == file
		app.plugins == [pluginJar]
		result == 'example'
		
		cleanup:
		deleteTempDir(tmpPath)
	}
	
	@Test
	def "test app start plugin dir"() {
		setup:
		def tmpPath = createTemp('de/andycandy/flow/plugin/dir/FlowDSLPluginTest.jar')
		App app = new App()
		
		File file = new File(Thread.currentThread().getContextClassLoader().getResource('de/andycandy/flow/flow_with_plugin.dsl').path)
			
		when:
		(new picocli.CommandLine(app)).parseArgs("-pd", tmpPath.toString(), file.absolutePath)
		def result = app.execute()
		
		then:
		app.scriptFile == file
		app.pluginDir == tmpPath.toFile()
		result == 'example'
		
		cleanup:
		deleteTempDir(tmpPath)
	}
	
	@Test
	def "test app start plugin groovy"() {
		setup:
		def tmpPath = createTemp('de/andycandy/flow/plugin/script_plugin.script', 'de/andycandy/flow/flow_with_plugin_script.dsl')
		App app = new App()
		
		File plugin = new File(tmpPath.toFile(), 'script_plugin.script')
		File file = new File(tmpPath.toFile(), 'flow_with_plugin_script.dsl')
			
		when:
		(new picocli.CommandLine(app)).parseArgs("-p", plugin.absolutePath, file.absolutePath)
		def result = app.execute()
		
		then:
		app.scriptFile == file
		result == ['Hello AnyName1', 'anyOutput','Hello AnyName3']
		
		cleanup:
		deleteTempDir(tmpPath)
	}
}